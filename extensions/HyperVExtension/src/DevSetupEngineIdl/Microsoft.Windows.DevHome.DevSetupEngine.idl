// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// import "Microsoft.Management.Configuration.idl";

namespace Microsoft.Windows.DevHome.DevSetupEngine
{
    [contractversion(1)]
    apicontract DevSetupEngineContract {}

    // The current state of a configuration set.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    enum ConfigurationSetState
    {
        // The state of the configuration set is unknown.
        Unknown,
        // The configuration set is in the queue to be applied.
        Pending,
        // The configuration set is actively being applied.
        InProgress,
        // The configuration set has completed being applied.
        Completed,
    };

    // The current state of a configuration unit.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    enum ConfigurationUnitState
    {
        // The state of the configuration unit is unknown.
        Unknown,
        // The configuration unit is in the queue to be applied.
        Pending,
        // The configuration unit is actively being applied.
        InProgress,
        // The configuration unit has completed being applied.
        Completed,
        // The configuration unit was not applied due to external factors.
        Skipped,
    };

    // The source of a result; for instance, the part of the system that generated a failure.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    enum ConfigurationUnitResultSource
    {
        // The source is not known, or more likely, there was no failure.
        None,
        // The result came from inside the configuration system; this is likely a bug.
        Internal,
        // The configuration set was ill formed. For instance, referencing a configuration unit
        // that does not exist or a dependency that is not present.
        ConfigurationSet,
        // The external module that processes the configuration unit generated the result.
        UnitProcessing,
        // The system state is causing the error.
        SystemState,
        // The configuration unit was not run due to a precondition not being met.
        // For example, if a dependency fails to be applied, this will be set.
        Precondition,
    };

    // Defines how the configuration unit is to be used within the configuration system.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    enum ConfigurationUnitIntent
    {
        // The configuration unit will only be used to Test the current system state.
        Assert,
        // The configuration unit will only be used to Get the current system state.
        Inform,
        // The configuration unit will be used to Apply the current system state.
        // The configuration unit will be used to Test and Get the current system state as part of that process.
        Apply,
        // The configuration unit's intent is unknown. This maps to WinGets unknown type but is currently not
        // not in use by WinGet.
        Unknown,
    }; 

    // Information on a result for a single unit of configuration.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IConfigurationUnitResultInformation
    {
        // The error code of the failure.
        HRESULT ResultCode{ get; };

        // The short description of the failure.
        String Description{ get; };

        // A more detailed error message appropriate for diagnosing the root cause of an error.
        String Details{ get; };

        // The source of the result.
        ConfigurationUnitResultSource ResultSource{ get; };
    }

    // The result of calling OpenConfigurationSet, containing either the set or details about the failure.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IOpenConfigurationSetResult
    {
        // The result from opening the set.
        HRESULT ResultCode{ get; };

        // The field that is missing/invalid, if appropriate for the specific ResultCode.
        String Field{ get; };

        // The value of the field, if appropriate for the specific ResultCode.
        String Value{ get; };

        // The line number for the failure reason, if determined.
        UInt32 Line{ get; };

        // The column number for the failure reason, if determined.
        UInt32 Column{ get; };
    }

    // A single unit of configuration.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IConfigurationUnit
    {
        // The type of the unit being configured; not a name for this instance.
        String Type{ get; };

        // The identifier name of this instance within the set.
        String Identifier{ get; };

        // The current state of the configuration unit.
        ConfigurationUnitState State{ get; };

        // Determines if this configuration unit should be treated as a group.
        // A configuration unit group treats its `Settings` as the definition of child units.
        Boolean IsGroup{ get; };

        // The configuration units that are part of this unit (if IsGroup is true).
        Windows.Foundation.Collections.IVector<IConfigurationUnit> Units{ get; };

        // Contains the values that are for use by the configuration unit itself.
        Windows.Foundation.Collections.ValueSet Settings { get; };

        // Describes how this configuration unit will be used.
        ConfigurationUnitIntent Intent { get; }; 
    }

    // The change event type that has occurred for a configuration set change.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    enum ConfigurationSetChangeEventType
    {
        Unknown,
        // The change event was for the set state. Only ConfigurationSetChangeData.SetState is valid.
        SetStateChanged,
        // The change event was for the unit state. All ConfigurationSetChangeData properties are valid.
        UnitStateChanged,
    };

    // The change data sent about changes to a specific set.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IConfigurationSetChangeData
    {
        // The change event type that occurred.
        ConfigurationSetChangeEventType Change{ get; };

        // The state of the configuration set for this event (the ConfigurationSet can be used to get the current state, which may be different).
        ConfigurationSetState SetState{ get; };
            
        // The state of the configuration unit for this event (the ConfigurationUnit can be used to get the current state, which may be different).
        ConfigurationUnitState UnitState{ get; };

        // Contains information on the result of the attempt to apply the configuration unit.
        IConfigurationUnitResultInformation ResultInformation{ get; };

        // The configuration unit whose state changed.
        IConfigurationUnit Unit{ get; };
    }

    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IApplyConfigurationUnitResult
    {
        // The configuration unit that was applied.
        IConfigurationUnit Unit{ get; };

        // The state of the configuration unit with regards to the current execution of ApplySet.
        ConfigurationUnitState State { get; }; 

        // Will be true if the configuration unit was in the desired state (Test returns true) prior to the apply action.
        Boolean PreviouslyInDesiredState{ get; };

        // Indicates whether a reboot is required after the configuration unit was applied.
        Boolean RebootRequired{ get; };

        // The result of applying the configuration unit.
        IConfigurationUnitResultInformation ResultInformation{ get; };
    }

    // The result of applying the settings for a configuration set.
    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IApplyConfigurationSetResult
    {
        // Results for each configuration unit in the set.
        Windows.Foundation.Collections.IVectorView<IApplyConfigurationUnitResult> UnitResults{ get; };

        // The overall result from applying the configuration set.
        HRESULT ResultCode{ get; };
    }

    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IApplyConfigurationResult
    {
        // The overall result from applying the configuration set (Open configuration, apply configuration and anything in between).
        HRESULT ResultCode{ get; };

        String ResultDescription{ get; };

        IOpenConfigurationSetResult OpenConfigurationSetResult{ get; };

        IApplyConfigurationSetResult ApplyConfigurationSetResult { get; };
    };

    [contract(Microsoft.Windows.DevHome.DevSetupEngine.DevSetupEngineContract, 1)]
    interface IDevSetupEngine
    {
        // Applies the configuration set state.
        Windows.Foundation.IAsyncOperationWithProgress<IApplyConfigurationResult, IConfigurationSetChangeData> ApplyConfigurationAsync(String content);
        void Dispose();
    };
}