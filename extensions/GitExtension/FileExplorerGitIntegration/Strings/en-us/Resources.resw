<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OpenRepositoryError" xml:space="preserve">
    <value>Unable to open repository at the given root path</value>
    <comment>Error text for when the git extension is unable to obtain the repository given its root path</comment>
  </data>
  <data name="FolderStatusBranch" xml:space="preserve">
    <value>Branch: {0}</value>
    <comment>Display the current Git branch</comment>
  </data>
  <data name="FolderStatusDetached" xml:space="preserve">
    <value>Detached: {0}</value>
    <comment>Display the commit id when the Git repo is in a detached state</comment>
  </data>
  <data name="FileStatusMergeConflict" xml:space="preserve">
    <value>Merge conflict</value>
    <comment>File status to display when its Git status is merge conflict</comment>
  </data>
  <data name="FileStatusUntracked" xml:space="preserve">
    <value>Untracked</value>
    <comment>File status to display when its Git status is untracked aka "new in the working dir"</comment>
  </data>
  <data name="FileStatusStaged" xml:space="preserve">
    <value>Staged</value>
    <comment>File status to display when its Git status has staged changes</comment>
  </data>
  <data name="FileStatusStagedRenamed" xml:space="preserve">
    <value>Staged, Renamed</value>
    <comment>File status to display when its Git status is renamed with staged changes</comment>
  </data>
  <data name="FileStatusStagedModified" xml:space="preserve">
    <value>Staged, Modified</value>
    <comment>File status to display when its Git status has staged changes and unstaged changes</comment>
  </data>
  <data name="FileStatusStagedRenamedModified" xml:space="preserve">
    <value>Staged, Renamed, Modified</value>
    <comment>File status to display when its Git status is renamed, and has both staged and unstaged changes</comment>
  </data>
  <data name="FileStatusModified" xml:space="preserve">
    <value>Modified</value>
    <comment>File status to display when its Git status has unstaged changes</comment>
  </data>
  <data name="FileStatusRenamedModified" xml:space="preserve">
    <value>Renamed, Modified</value>
    <comment>File status to display when its Git status is renamed with unstaged changes</comment>
  </data>
  <data name="SubmoduleStatusStaged" xml:space="preserve">
    <value>Submodule Staged</value>
    <comment>Submodule status to display when the Git submodule refers to a different commit, and is staged</comment>
  </data>
  <data name="SubmoduleStatusDirty" xml:space="preserve">
    <value>Submodule Dirty</value>
    <comment>Submodule status to display when the Git submodule has local modifications</comment>
  </data>
  <data name="SubmoduleStatusChanged" xml:space="preserve">
    <value>Submodule Changed</value>
    <comment>Submodule status to display when the Git submodule refers to a different commit</comment>
  </data>
  <data name="FileStatusAdded" xml:space="preserve">
    <value>Added</value>
    <comment>File status to display when its Git status is newly added to the index</comment>
  </data>
  <data name="FileStatusAddedModified" xml:space="preserve">
    <value>Added, Modified</value>
    <comment>File status to display when its Git status is newly added to the index and modified in the working directory</comment>
  </data>
  <data name="SubmoduleStatusUntracked" xml:space="preserve">
    <value>Submodule Untracked</value>
    <comment>Submodule status to display when a submodule is added but not staged</comment>
  </data>
  <data name="SubmoduleStatusAdded" xml:space="preserve">
    <value>Submodule Added</value>
    <comment>Submodule status to display when a submodule is added and staged</comment>
  </data>
  <data name="RepositoryNotFound" xml:space="preserve">
    <value>Please choose a path to the working directory. For example, the path with the .git subfolder.</value>
    <comment>Display message when the repository path is invalid</comment>
  </data>
  <data name="RepositoryNotOwnedByCurrentUser" xml:space="preserve">
    <value>The repository path is not owned by the current user and has dubious ownership</value>
    <comment>Display message when the path has dubious ownership</comment>
  </data>
</root>
