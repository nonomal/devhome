// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System;
using System.IO;
using System.Linq;

namespace DevHome.SetupFlow.Common.Helpers;

/// <summary>
/// Helper class for DSC related constants.
/// </summary>
public static class DscHelpers
{
    public const string GitCloneDscResource = "GitDsc/GitClone";

    public const string GitWinGetPackageId = "Git.Git";

    public const string GitName = "Git";

    public const string DscSourceNameForWinGet = "winget";

    public const string WinGetDscResource = "Microsoft.WinGet.DSC/WinGetPackage";

    public const string WinGetConfigureVersion = "0.2.0";

    // Banner to be shown on top of the generated winget config file.
    public const string DevHomeHeaderBanner =
@"# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
# Reference: https://github.com/microsoft/winget-create#building-the-client
# WinGet Configure file Generated By Dev Home.";

    public const string ConfigurationFolderName = ".configurations";

    public const string ConfigurationFileYamlExtension = ".dsc.yaml";

    public const string ConfigurationFileWingetExtension = ".winget";

    /// <summary>
    /// Enumerates all files inside the <see cref="ConfigurationFolderName"/> of a repository
    /// and returns the most recently modified configuration file.
    /// </summary>
    /// <param name="repositoryRoot">The path to the root of a repository.</param>
    /// <returns>Path to the configuration file.  String.Empty in all other cases.</returns>
    public static string GetConfigurationFileIfExists(string repositoryRoot)
    {
        var configurationDirectory = Path.Join(repositoryRoot, ConfigurationFolderName);
        if (Directory.Exists(configurationDirectory))
        {
            var fileToUse = Directory.EnumerateFiles(configurationDirectory)
            .Where(file => file.EndsWith(ConfigurationFileYamlExtension, StringComparison.OrdinalIgnoreCase) ||
                           file.EndsWith(ConfigurationFileWingetExtension, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(configurationFile => File.GetLastWriteTime(configurationFile))
            .FirstOrDefault();

            if (fileToUse != default)
            {
                return fileToUse;
            }
        }

        return string.Empty;
    }
}
